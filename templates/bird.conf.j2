# This is a minimal configuration file, which allows the bird daemon to start
# but will not cause anything else to happen.
#
# Please refer to the documentation in the bird-doc package or BIRD User's
# Guide on http://bird.network.cz/ for more information on configuring BIRD and
# adding routing protocols.

# Change this into your BIRD router ID. It's a world-wide unique identification
# of your router, usually one of router's IPv4 addresses.
router id {{ ansible_default_ipv4.address }};

filter no_default_route {
        if net = 0.0.0.0/0 then reject;
        else accept;
}

# The Device protocol is not a real routing protocol. It doesn't generate any
# routes and it only serves as a module for getting information about network
# interfaces from the kernel.
protocol device {
}

# The Kernel protocol is not a real routing protocol. Instead of communicating
# with other routers in the network, it performs synchronization of BIRD's
# routing tables with the OS kernel.
protocol kernel {
        metric 64;      # Use explicit kernel route metric to avoid collisions
                        # with non-BIRD routes in the kernel routing table
        import all;     # Including default route
        export all;     # Actually insert routes into the kernel routing table
        export filter no_default_route;
        merge paths yes;
        persist;
}

# Advertise self as default route
protocol static {
        route 0.0.0.0/0 via {{ hostvars[inventory_hostname][router_k8s_internal_interface]['ipv4']['address'] }};
}

{% for cluster in router_k8s_clusters %}
{% for item in groups[cluster.worker_group] %}

protocol bgp {{ hostvars[item]['ansible_hostname']|regex_replace('-','_') }} {
        description "{{ hostvars[item]['ansible_default_ipv4']['address'] }}";
        local as {{ cluster.bgp_as }};
        neighbor {{ hostvars[item]['ansible_default_ipv4']['address'] }} as {{ cluster.bgp_as }};
        rr client;
        rr cluster id {{ cluster.ha_ip_intern }};
        graceful restart;
        import all;
        export all;
        direct;
        gateway direct;
}
{% endfor %}

{% for item in groups[cluster.master_group] %}

protocol bgp {{ hostvars[item]['ansible_hostname']|regex_replace('-','_') }} {
        description "{{ hostvars[item]['ansible_default_ipv4']['address'] }}";
        local as {{ cluster.bgp_as }};
        neighbor {{ hostvars[item]['ansible_default_ipv4']['address'] }} as {{ cluster.bgp_as }};
        rr client;
        rr cluster id {{ cluster.ha_ip_intern }};
        graceful restart;
        import none;
        export all;
        direct;
        gateway direct;
}
{% endfor %}

{% for remote_group in router_k8s_other_routers %}
{% for item in groups[remote_group] %}

protocol bgp {{ hostvars[item]['ansible_hostname']|regex_replace('-','_') }} {
        description "{{ hostvars[item]['ansible_default_ipv4']['address'] }}";
        local as {{ cluster.bgp_as }};
        neighbor {{ hostvars[item]['ansible_default_ipv4']['address'] }} as {{ hostvars[item]['router_k8s_bgp_as'] }};
        graceful restart;
        import all;
        export filter {
            if net ~ {{ cluster.cluster_cidr }} then accept;
            if net ~ {{ cluster.service_cidr }} then accept;
            reject;
        };
        direct;
        gateway direct;
}
{% endfor %}
{% endfor %}
{% endfor %}
